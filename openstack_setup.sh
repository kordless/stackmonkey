#!/bin/bash

# just so we're all clear
clear 

if [ -f ./setuprc ]
then
	echo "########################################################################################################################"
	echo;
	echo "Setup has already been run.  Edit or delete the ./setuprc file in this directory to reconfigure setup."
	echo;
	echo "########################################################################################################################"
	echo;
	exit
fi

# validate IPs
function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

# grab our IP 
read -p "Enter the primary interface name (eth0, etc.) : " internetnic
SERVER_IP=$(/sbin/ifconfig $internetnic| sed -n 's/.*inet *addr:\([0-9\.]*\).*/\1/p')
if [ -z "$SERVER_IP" ]; then
  echo "No IP found on that interface!  Check your network configuration and the instructions for help.";
  exit;
fi

# single or multi?
echo;
read -p "How many total nodes in this install? " -r
if [ $REPLY -eq $REPLY 2>/dev/null ]
then
  num_nodes=$REPLY
  echo "export NUMBER_NODES="$REPLY >> setuprc
else
  echo;
  echo "You need to enter an integer value."
  exit;
fi

# prompt for a few things we'll need for setup
for (( x=1; x<=$num_nodes; x++ ))
  do
    read -p "Enter a short hostname for node #"$x": "
    echo "export NODE_"$x"_HOSTNAME="$REPLY >> setuprc

    while [ 1 ]
    do
      read -p "Enter the IP address for node #"$x" ($REPLY): "
      if valid_ip $REPLY
      then
        echo "export NODE_"$x"_IP="$REPLY >> setuprc
        break
      else
        echo;
        echo "ERROR: That's not a valid IP address!"
        echo;
      fi
    done
  done

# source that sucker
. ./setuprc

# install rinetd
apt-get -y install rinetd

# check if we are running the chef server on the first node
if [ $SERVER_IP != $NODE_1_IP ]
then
  # not expecting apache server on this box
  echo "export CHEF_SERVER_IP="$SERVER_IP > setuprc
  echo $SERVER_IP" 443 "$SERVER_IP" 4443" > /etc/rinetd.conf
else
  # expecting apache server to be on this box
  echo;
  echo "#############################################################################################################"
  echo;
  echo "You are running the Vagrant Chef Server on the first node.  This script will add a new IP address to the node" 
  echo "using an alias for the "$internetnic" interface.  The alias will be added to the /etc/rc.local file to ensure"
  echo "it exists after a reboot."
  echo;
  echo "#############################################################################################################"
  echo;

  # get the Vagrant Chef IP from users
  while [ 1 ]
  do
    read -p "Enter the IP address to assign to the Chef Server: " -r
    if valid_ip $REPLY
    then
      echo $REPLY" 443 "$REPLY" 4443" > /etc/rinetd.conf
      echo "ifconfig "$internetnic":0 "$REPLY" up" >> /etc/init.d/chefserver-ip
      ln -s /etc/init.d/chefserver-ip /etc/rc3.d/S20chefserver-ip
      ifconfig $internetnic:0 $REPLY up
      break
    else
      echo "ERROR: That's not a valid IP address!"
    fi
  done

  # check if we already have a ports file
  if [ -f /etc/apache2/ports.conf ]
  then
    echo;
    echo "#############################################################################################################"
    echo;
    echo "Found an existing /etc/apache2/ports.conf file.  If you have Apache running on this machine, this will cause" 
    echo "issues accessing the Vagrant Chef server.  If you are re-running this script, you may ignore this error."
    echo;
    echo "#############################################################################################################"
  else
    echo "# This file was generated by the StackGeek OpenStack installer." > /etc/apache/ports.conf
    echo "Listen "$SERVER_IP":80" >> /etc/apache/ports.conf
    echo "NameVirtualHost "$SERVER_IP":80" >> /etc/apache/ports.conf
    echo "Listen "$SERVER_IP":443" >> /etc/apache/ports.conf
    echo "NameVirtualHost "$SERVER_IP":443" >> /etc/apache/ports.conf
  fi
fi  

# restart rinetd
service rinetd restart

# making a unique token for this install
if [ -a "/sbin/md5" ]
then
  token=`cat /dev/urandom | head -c2048 | md5 | cut -d' ' -f1`
else
  token=`cat /dev/urandom | head -c2048 | md5sum | cut -d' ' -f1`
fi
echo "export ROOT_PASSWD="$token >> setuprc

# tack on our other variables
public_network=`echo $NODE_1_IP | cut -d"." -f1-3`
echo "export PUBLIC_NETWORK="$public_network".0" >> setuprc
echo "export PRIVATE_NETWORK=10.0.55.0" >> setuprc
echo "export BRIDGE_INTERFACE=eth0" >> setuprc

# source that sucker, again
. ./setuprc

# say a setup howdy to user
echo;
echo "#############################################################################################################"
echo;
echo "Using the following for setup.  Edit 'setuprc' if you don't like what you see."
echo;
echo "#############################################################################################################"
echo;
cat setuprc
echo;
echo "#############################################################################################################"
echo;
echo "Setup configuration complete.  Continue the setup by doing a 'vagrant up'."
echo;
echo "#############################################################################################################"
echo;


